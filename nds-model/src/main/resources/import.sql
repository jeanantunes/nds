--Apaga a tabela criada na exportação do entidade (ViewContaCorrente)

DROP TABLE IF EXISTS VIEW_CONTA_CORRENTE_COTA;

--Cria a view correspondente a entidade (ViewContaCorrente)

CREATE OR REPLACE VIEW VIEW_CONTA_CORRENTE_COTA AS  ( SELECT  consolidado_financeiro_cota.ID AS ID,  consolidado_financeiro_cota.cota_ID AS COTA_ID,  cota.NUMERO_COTA AS NUMERO_COTA,  consolidado_financeiro_cota.CONSIGNADO AS CONSIGNADO,  consolidado_financeiro_cota.DT_CONSOLIDADO AS DT_CONSOLIDADO,  consolidado_financeiro_cota.DEBITO_CREDITO AS DEBITO_CREDITO,  consolidado_financeiro_cota.ENCALHE AS ENCALHE,  consolidado_financeiro_cota.ENCARGOS AS ENCARGOS,  consolidado_financeiro_cota.NUMERO_ATRASADOS AS NUMERO_ATRASADOS,  consolidado_financeiro_cota.PENDENTE AS PENDENTE,  consolidado_financeiro_cota.TOTAL AS TOTAL,  consolidado_financeiro_cota.VALOR_POSTERGADO AS VALOR_POSTERGADO,  consolidado_financeiro_cota.VENDA_ENCALHE AS VENDA_ENCALHE,   'CONSOLIDADO' AS TIPO, ( SELECT CASE WHEN divida.DATA IS NOT NULL THEN divida.DATA ELSE acumulada.data END AS data_raiz FROM divida acumulada LEFT JOIN DIVIDA divida ON divida.id = acumulada.divida_raiz_id WHERE acumulada.consolidado_id = consolidado_financeiro_cota.id) AS DT_RAIZ_CONSOLIDADO FROM consolidado_financeiro_cota INNER JOIN cota ON cota.id=consolidado_financeiro_cota.cota_ID) UNION  ( SELECT  0 AS ID,  cota.id AS COTA_ID,  cota.NUMERO_COTA AS NUMERO_COTA, NULL AS CONSIGNADO,  cobranca.DT_EMISSAO AS DT_CONSOLIDADO, NULL AS DEBITO_CREDITO, NULL AS ENCALHE, NULL AS ENCARGOS, NULL AS NUMERO_ATRASADOS,  cobranca.VALOR AS PENDENTE, NULL AS TOTAL, NULL VALOR_POSTERGADO, NULL AS VENDA_ENCALHE,  'COBRANCA' AS TIPO, NULL AS DT_RAIZ_CONSOLIDADO FROM cobranca INNER JOIN cota ON cota.id=cobranca.cota_ID WHERE cobranca.status_cobranca = 'NAO_PAGO' AND cobranca.DT_VENCIMENTO > ( SELECT MAX(consolidado_financeiro_cota.DT_CONSOLIDADO) FROM consolidado_financeiro_cota));																																																																																																																		                                                																																																																																																																																																																																																																																															

--Apaga a tabela criada na exportação do entidade (ViewDesconto)

DROP TABLE IF EXISTS VIEW_DESCONTO;

--Cria a view correspondente a entidade (ViewDesconto)

DROP TABLE IF EXISTS VIEW_DESCONTO;

CREATE OR REPLACE VIEW VIEW_DESCONTO AS SELECT CASE tipo_produto.GRUPO_PRODUTO WHEN 'OUTROS' THEN COALESCE(produto.DESCONTO, 0) ELSE COALESCE(desconto_produto_edicao.DESCONTO, 0) END AS DESCONTO, cota.ID AS COTA_ID, produto_edicao.ID AS PRODUTO_EDICAO_ID, fornecedor.ID AS FORNECEDOR_ID FROM desconto_produto_edicao, cota, produto, produto_edicao, tipo_produto, fornecedor WHERE desconto_produto_edicao.COTA_ID = cota.ID AND desconto_produto_edicao.PRODUTO_EDICAO_ID = produto_edicao.ID AND desconto_produto_edicao.FORNECEDOR_ID = fornecedor.ID AND produto_edicao.PRODUTO_ID = produto.ID AND produto.TIPO_PRODUTO_ID = tipo_produto.ID;
	
--Cria as tabelas do Quartz

CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS(SCHED_NAME VARCHAR(120) NOT NULL,JOB_NAME  VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250) NULL,JOB_CLASS_NAME   VARCHAR(250) NOT NULL,IS_DURABLE VARCHAR(1) NOT NULL,IS_NONCONCURRENT VARCHAR(1) NOT NULL,IS_UPDATE_DATA VARCHAR(1) NOT NULL,REQUESTS_RECOVERY VARCHAR(1) NOT NULL,JOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,JOB_NAME  VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250) NULL,NEXT_FIRE_TIME BIGINT(13) NULL,PREV_FIRE_TIME BIGINT(13) NULL,PRIORITY INTEGER NULL,TRIGGER_STATE VARCHAR(16) NOT NULL,TRIGGER_TYPE VARCHAR(8) NOT NULL,START_TIME BIGINT(13) NOT NULL,END_TIME BIGINT(13) NULL,CALENDAR_NAME VARCHAR(200) NULL,MISFIRE_INSTR SMALLINT(2) NULL,JOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,REPEAT_COUNT BIGINT(7) NOT NULL,REPEAT_INTERVAL BIGINT(12) NOT NULL,TIMES_TRIGGERED BIGINT(10) NOT NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,CRON_EXPRESSION VARCHAR(200) NOT NULL,TIME_ZONE_ID VARCHAR(80),PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,STR_PROP_1 VARCHAR(512) NULL,STR_PROP_2 VARCHAR(512) NULL,STR_PROP_3 VARCHAR(512) NULL,INT_PROP_1 INT NULL,INT_PROP_2 INT NULL,LONG_PROP_1 BIGINT NULL,LONG_PROP_2 BIGINT NULL,DEC_PROP_1 NUMERIC(13,4) NULL,DEC_PROP_2 NUMERIC(13,4) NULL,BOOL_PROP_1 VARCHAR(1) NULL,BOOL_PROP_2 VARCHAR(1) NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,BLOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS(SCHED_NAME VARCHAR(120) NOT NULL,CALENDAR_NAME  VARCHAR(200) NOT NULL,CALENDAR BLOB NOT NULL,PRIMARY KEY (SCHED_NAME,CALENDAR_NAME));

CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_GROUP  VARCHAR(200) NOT NULL, PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,ENTRY_ID VARCHAR(95) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,FIRED_TIME BIGINT(13) NOT NULL,PRIORITY INTEGER NOT NULL,STATE VARCHAR(16) NOT NULL,JOB_NAME VARCHAR(200) NULL,JOB_GROUP VARCHAR(200) NULL,IS_NONCONCURRENT VARCHAR(1) NULL,REQUESTS_RECOVERY VARCHAR(1) NULL,PRIMARY KEY (SCHED_NAME,ENTRY_ID));

CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE(SCHED_NAME VARCHAR(120) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,LAST_CHECKIN_TIME BIGINT(13) NOT NULL,CHECKIN_INTERVAL BIGINT(13) NOT NULL,PRIMARY KEY (SCHED_NAME,INSTANCE_NAME));

CREATE TABLE IF NOT EXISTS QRTZ_LOCKS(SCHED_NAME VARCHAR(120) NOT NULL,LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (SCHED_NAME,LOCK_NAME));