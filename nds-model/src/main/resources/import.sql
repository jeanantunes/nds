--Apaga a tabela criada na exportação do entidade (ViewContaCorrente)

DROP TABLE IF EXISTS VIEW_CONTA_CORRENTE_COTA;

--Cria a view correspondente a entidade (ViewContaCorrente)

CREATE OR REPLACE VIEW VIEW_CONTA_CORRENTE_COTA AS ( SELECT  		 consolidado_financeiro_cota.ID AS ID,  		 consolidado_financeiro_cota.cota_ID AS COTA_ID,  		 cota.NUMERO_COTA AS NUMERO_COTA,  		 consolidado_financeiro_cota.CONSIGNADO AS CONSIGNADO,  		 consolidado_financeiro_cota.DT_CONSOLIDADO AS DT_CONSOLIDADO,  		 consolidado_financeiro_cota.DEBITO_CREDITO AS DEBITO_CREDITO,  		 consolidado_financeiro_cota.ENCALHE AS ENCALHE,  		 consolidado_financeiro_cota.ENCARGOS AS ENCARGOS,  		 consolidado_financeiro_cota.PENDENTE AS PENDENTE,  		 consolidado_financeiro_cota.TOTAL AS TOTAL,  		 consolidado_financeiro_cota.VALOR_POSTERGADO AS VALOR_POSTERGADO,  		 consolidado_financeiro_cota.VENDA_ENCALHE AS VENDA_ENCALHE,  		 'CONSOLIDADO' AS TIPO,  		 ( 			SELECT CASE WHEN divida.DATA IS NOT NULL THEN divida.DATA ELSE acumulada.data END AS data_raiz 			FROM divida acumulada 			LEFT JOIN DIVIDA divida ON divida.id = acumulada.divida_raiz_id 			WHERE acumulada.consolidado_id = consolidado_financeiro_cota.id 		)AS DT_RAIZ_CONSOLIDADO, 		  		 NULL as DT_RAIZ_PENDENTE, 		 		coalesce((select sum(baixa_cobranca.VALOR_PAGO) 			from baixa_cobranca INNER JOIN cobranca ON cobranca.ID = baixa_cobranca.COBRANCA_ID    			INNER JOIN divida ON divida.ID = cobranca.DIVIDA_ID 			where baixa_cobranca.STATUS NOT IN ('NAO_PAGO_DIVERGENCIA_VALOR', 														'NAO_PAGO_DIVERGENCIA_DATA', 														'NAO_PAGO_BAIXA_JA_REALIZADA', 														'NAO_PAGO_POSTERGADO') 			and cota.ID = cobranca.COTA_ID 			and divida.CONSOLIDADO_ID = consolidado_financeiro_cota.ID 			and consolidado_financeiro_cota.ID 		),0) AS VALOR_PAGO, coalesce((select sum(baixa_cobranca.VALOR_PAGO) 			from baixa_cobranca INNER JOIN cobranca ON cobranca.ID = baixa_cobranca.COBRANCA_ID    			INNER JOIN divida ON divida.ID = cobranca.DIVIDA_ID 			where baixa_cobranca.STATUS NOT IN ('NAO_PAGO_DIVERGENCIA_VALOR', 														'NAO_PAGO_DIVERGENCIA_DATA', 														'NAO_PAGO_BAIXA_JA_REALIZADA', 														'NAO_PAGO_POSTERGADO') 			and cota.ID = cobranca.COTA_ID 			and divida.CONSOLIDADO_ID = consolidado_financeiro_cota.ID 			and consolidado_financeiro_cota.ID 		),0) - TOTAL AS SALDO 		 FROM consolidado_financeiro_cota INNER JOIN cota ON cota.id=consolidado_financeiro_cota.cota_ID );

--Cria a view correspondente a entidade (ViewDesconto)

DROP TABLE IF EXISTS VIEW_DESCONTO;

CREATE OR REPLACE VIEW VIEW_DESCONTO AS SELECT CASE tipo_produto.GRUPO_PRODUTO WHEN 'OUTROS' THEN COALESCE(produto.DESCONTO, 0) ELSE COALESCE(desconto_produto_edicao.DESCONTO, 0) END AS DESCONTO, cota.ID AS COTA_ID, produto_edicao.ID AS PRODUTO_EDICAO_ID, fornecedor.ID AS FORNECEDOR_ID FROM desconto_produto_edicao, cota, produto, produto_edicao, tipo_produto, fornecedor WHERE desconto_produto_edicao.COTA_ID = cota.ID AND desconto_produto_edicao.PRODUTO_EDICAO_ID = produto_edicao.ID AND desconto_produto_edicao.FORNECEDOR_ID = fornecedor.ID AND produto_edicao.PRODUTO_ID = produto.ID AND produto.TIPO_PRODUTO_ID = tipo_produto.ID;

DROP TABLE IF EXISTS VIEW_CONSOLIDADO_MOVIMENTO_ESTOQUE_COTA;

CREATE OR REPLACE VIEW VIEW_CONSOLIDADO_MOVIMENTO_ESTOQUE_COTA AS select `movimento_estoque_cota`.`COTA_ID` AS `COTA_ID`,`produto_edicao`.`PRODUTO_ID` AS `PRODUTO_ID`,`movimento_estoque_cota`.`PRODUTO_EDICAO_ID` AS `PRODUTO_EDICAO_ID`,`produto_edicao`.`NUMERO_EDICAO` AS `NUMERO_EDICAO`,`movimento_estoque_cota`.`DATA` AS `DATA_MOVIMENTO`,`produto_edicao`.`PRECO_VENDA` AS `PRECO_VENDA`,coalesce((select sum(`mov_sub`.`QTDE`) AS `valor_venda` from ((`movimento_estoque_cota` `mov_sub` join `produto_edicao` `prod_sub` on((`mov_sub`.`PRODUTO_EDICAO_ID` = `prod_sub`.`ID`))) join `tipo_movimento` `tipo_mov_sub` on((`mov_sub`.`TIPO_MOVIMENTO_ID` = `tipo_mov_sub`.`ID`))) where ((`tipo_mov_sub`.`OPERACAO_ESTOQUE` = _latin1'ENTRADA') and (`mov_sub`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`mov_sub`.`ID` = `movimento_estoque_cota`.`ID`) and (`prod_sub`.`ID` = `produto_edicao`.`ID`))),0) AS `QNT_ENTRADA_PRODUTO`,coalesce((select sum(`mov_sub_sd`.`QTDE`) AS `valor_venda` from ((`movimento_estoque_cota` `mov_sub_SD` join `produto_edicao` `prod_sub_SD` on((`mov_sub_sd`.`PRODUTO_EDICAO_ID` = `prod_sub_sd`.`ID`))) join `tipo_movimento` `tipo_mov_sub_SD` on((`mov_sub_sd`.`TIPO_MOVIMENTO_ID` = `tipo_mov_sub_sd`.`ID`))) where ((`tipo_mov_sub_sd`.`OPERACAO_ESTOQUE` = _latin1'SAIDA') and (`mov_sub_sd`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`mov_sub_sd`.`ID` = `movimento_estoque_cota`.`ID`) and (`prod_sub_sd`.`ID` = `produto_edicao`.`ID`))),0) AS `QNT_SAIDA_PRODUTO`,sum(((coalesce((select sum(`mov_sub`.`QTDE`) AS `valor_venda` from ((`movimento_estoque_cota` `mov_sub` join `produto_edicao` `prod_sub` on((`mov_sub`.`PRODUTO_EDICAO_ID` = `prod_sub`.`ID`))) join `tipo_movimento` `tipo_mov_sub` on((`mov_sub`.`TIPO_MOVIMENTO_ID` = `tipo_mov_sub`.`ID`))) where ((`tipo_mov_sub`.`OPERACAO_ESTOQUE` = _latin1'ENTRADA') and (`mov_sub`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`mov_sub`.`ID` = `movimento_estoque_cota`.`ID`) and (`prod_sub`.`ID` = `produto_edicao`.`ID`))),0) - coalesce((select sum(`mov_sub_sd`.`QTDE`) AS `valor_venda` from ((`movimento_estoque_cota` `mov_sub_SD` join `produto_edicao` `prod_sub_SD` on((`mov_sub_sd`.`PRODUTO_EDICAO_ID` = `prod_sub_sd`.`ID`))) join `tipo_movimento` `tipo_mov_sub_SD` on((`mov_sub_sd`.`TIPO_MOVIMENTO_ID` = `tipo_mov_sub_sd`.`ID`))) where ((`tipo_mov_sub_sd`.`OPERACAO_ESTOQUE` = _latin1'SAIDA') and (`mov_sub_sd`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`mov_sub_sd`.`ID` = `movimento_estoque_cota`.`ID`) and (`prod_sub_sd`.`ID` = `produto_edicao`.`ID`))),0)) * `produto_edicao`.`PRECO_VENDA`)) AS `VALOR_TOTAL_VENDA`,coalesce((select `view_desconto`.`DESCONTO` AS `DESCONTO` from (`view_desconto` join `produto_fornecedor`) where ((`view_desconto`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`view_desconto`.`PRODUTO_EDICAO_ID` = `movimento_estoque_cota`.`PRODUTO_EDICAO_ID`) and (`produto_fornecedor`.`PRODUTO_ID` = `view_desconto`.`PRODUTO_EDICAO_ID`) and (`produto_fornecedor`.`fornecedores_ID` = `view_desconto`.`FORNECEDOR_ID`))),0) AS `DESCONTO_PRODUTO`,sum(((coalesce((select sum(`mov_sub`.`QTDE`) AS `valor_venda` from ((`movimento_estoque_cota` `mov_sub` join `produto_edicao` `prod_sub` on((`mov_sub`.`PRODUTO_EDICAO_ID` = `prod_sub`.`ID`))) join `tipo_movimento` `tipo_mov_sub` on((`mov_sub`.`TIPO_MOVIMENTO_ID` = `tipo_mov_sub`.`ID`))) where ((`tipo_mov_sub`.`OPERACAO_ESTOQUE` = _latin1'ENTRADA') and (`mov_sub`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`mov_sub`.`ID` = `movimento_estoque_cota`.`ID`) and (`prod_sub`.`ID` = `produto_edicao`.`ID`))),0) - coalesce((select sum(`mov_sub_sd`.`QTDE`) AS `valor_venda` from ((`movimento_estoque_cota` `mov_sub_SD` join `produto_edicao` `prod_sub_SD` on((`mov_sub_sd`.`PRODUTO_EDICAO_ID` = `prod_sub_sd`.`ID`))) join `tipo_movimento` `tipo_mov_sub_SD` on((`mov_sub_sd`.`TIPO_MOVIMENTO_ID` = `tipo_mov_sub_sd`.`ID`))) where ((`tipo_mov_sub_sd`.`OPERACAO_ESTOQUE` = _latin1'SAIDA') and (`mov_sub_sd`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`mov_sub_sd`.`ID` = `movimento_estoque_cota`.`ID`) and (`prod_sub_sd`.`ID` = `produto_edicao`.`ID`))),0)) * (`produto_edicao`.`PRECO_VENDA` - ((`produto_edicao`.`PRECO_VENDA` * coalesce((select `view_desconto`.`DESCONTO` AS `DESCONTO` from (`view_desconto` join `produto_fornecedor`) where ((`view_desconto`.`COTA_ID` = `movimento_estoque_cota`.`COTA_ID`) and (`view_desconto`.`PRODUTO_EDICAO_ID` = `movimento_estoque_cota`.`PRODUTO_EDICAO_ID`) and (`produto_fornecedor`.`PRODUTO_ID` = `view_desconto`.`PRODUTO_EDICAO_ID`) and (`produto_fornecedor`.`fornecedores_ID` = `view_desconto`.`FORNECEDOR_ID`))),0)) / 100)))) AS `VALOR_TOTAL_VENDA_COM_DESCONTO` from (`movimento_estoque_cota` join `produto_edicao` on((`movimento_estoque_cota`.`PRODUTO_EDICAO_ID` = `produto_edicao`.`ID`))) group by `movimento_estoque_cota`.`PRODUTO_EDICAO_ID`,`movimento_estoque_cota`.`COTA_ID`,`movimento_estoque_cota`.`DATA` order by `movimento_estoque_cota`.`DATA` desc;

--Cria as tabelas do Quartz

CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS(SCHED_NAME VARCHAR(120) NOT NULL,JOB_NAME  VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250) NULL,JOB_CLASS_NAME   VARCHAR(250) NOT NULL,IS_DURABLE VARCHAR(1) NOT NULL,IS_NONCONCURRENT VARCHAR(1) NOT NULL,IS_UPDATE_DATA VARCHAR(1) NOT NULL,REQUESTS_RECOVERY VARCHAR(1) NOT NULL,JOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,JOB_NAME  VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250) NULL,NEXT_FIRE_TIME BIGINT(13) NULL,PREV_FIRE_TIME BIGINT(13) NULL,PRIORITY INTEGER NULL,TRIGGER_STATE VARCHAR(16) NOT NULL,TRIGGER_TYPE VARCHAR(8) NOT NULL,START_TIME BIGINT(13) NOT NULL,END_TIME BIGINT(13) NULL,CALENDAR_NAME VARCHAR(200) NULL,MISFIRE_INSTR SMALLINT(2) NULL,JOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,REPEAT_COUNT BIGINT(7) NOT NULL,REPEAT_INTERVAL BIGINT(12) NOT NULL,TIMES_TRIGGERED BIGINT(10) NOT NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,CRON_EXPRESSION VARCHAR(200) NOT NULL,TIME_ZONE_ID VARCHAR(80),PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,STR_PROP_1 VARCHAR(512) NULL,STR_PROP_2 VARCHAR(512) NULL,STR_PROP_3 VARCHAR(512) NULL,INT_PROP_1 INT NULL,INT_PROP_2 INT NULL,LONG_PROP_1 BIGINT NULL,LONG_PROP_2 BIGINT NULL,DEC_PROP_1 NUMERIC(13,4) NULL,DEC_PROP_2 NUMERIC(13,4) NULL,BOOL_PROP_1 VARCHAR(1) NULL,BOOL_PROP_2 VARCHAR(1) NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,BLOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS(SCHED_NAME VARCHAR(120) NOT NULL,CALENDAR_NAME  VARCHAR(200) NOT NULL,CALENDAR BLOB NOT NULL,PRIMARY KEY (SCHED_NAME,CALENDAR_NAME));

CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_GROUP  VARCHAR(200) NOT NULL, PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,ENTRY_ID VARCHAR(95) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,FIRED_TIME BIGINT(13) NOT NULL,PRIORITY INTEGER NOT NULL,STATE VARCHAR(16) NOT NULL,JOB_NAME VARCHAR(200) NULL,JOB_GROUP VARCHAR(200) NULL,IS_NONCONCURRENT VARCHAR(1) NULL,REQUESTS_RECOVERY VARCHAR(1) NULL,PRIMARY KEY (SCHED_NAME,ENTRY_ID));

CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE(SCHED_NAME VARCHAR(120) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,LAST_CHECKIN_TIME BIGINT(13) NOT NULL,CHECKIN_INTERVAL BIGINT(13) NOT NULL,PRIMARY KEY (SCHED_NAME,INSTANCE_NAME));

CREATE TABLE IF NOT EXISTS QRTZ_LOCKS(SCHED_NAME VARCHAR(120) NOT NULL,LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (SCHED_NAME,LOCK_NAME));