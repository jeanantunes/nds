--Apaga a tabela criada na exportação do entidade (ViewContaCorrente)

DROP TABLE IF EXISTS VIEW_CONTA_CORRENTE_COTA;

--Cria a view correspondente a entidade (ViewContaCorrente)

CREATE OR REPLACE VIEW VIEW_CONTA_CORRENTE_COTA AS (SELECT CONSOLIDADO_FINANCEIRO_COTA.ID AS ID, CONSOLIDADO_FINANCEIRO_COTA.COTA_ID AS COTA_ID, COTA.NUMERO_COTA AS NUMERO_COTA, CONSOLIDADO_FINANCEIRO_COTA.CONSIGNADO AS CONSIGNADO, CONSOLIDADO_FINANCEIRO_COTA.DT_CONSOLIDADO AS DT_CONSOLIDADO, CONSOLIDADO_FINANCEIRO_COTA.DEBITO_CREDITO AS DEBITO_CREDITO, CONSOLIDADO_FINANCEIRO_COTA.ENCALHE AS ENCALHE, CONSOLIDADO_FINANCEIRO_COTA.ENCARGOS AS ENCARGOS, CONSOLIDADO_FINANCEIRO_COTA.NUMERO_ATRASADOS AS NUMERO_ATRASADOS, CONSOLIDADO_FINANCEIRO_COTA.PENDENTE AS PENDENTE, CONSOLIDADO_FINANCEIRO_COTA.TOTAL AS TOTAL, CONSOLIDADO_FINANCEIRO_COTA.VALOR_POSTERGADO AS VALOR_POSTERGADO, CONSOLIDADO_FINANCEIRO_COTA.VENDA_ENCALHE AS VENDA_ENCALHE, 'CONSOLIDADO' AS TIPO FROM CONSOLIDADO_FINANCEIRO_COTA INNER JOIN COTA ON COTA.ID=CONSOLIDADO_FINANCEIRO_COTA.COTA_ID) UNION (SELECT 0 AS ID, COTA.ID AS COTA_ID, COTA.NUMERO_COTA AS NUMERO_COTA, NULL AS CONSIGNADO, COBRANCA.DT_EMISSAO AS DT_CONSOLIDADO, NULL AS DEBITO_CREDITO, NULL AS ENCALHE, NULL AS ENCARGOS, NULL AS NUMERO_ATRASADOS, COBRANCA.VALOR AS PENDENTE, NULL AS TOTAL, NULL VALOR_POSTERGADO, NULL AS VENDA_ENCALHE, 'COBRANCA' AS TIPO FROM COBRANCA INNER JOIN COTA ON COTA.ID=COBRANCA.COTA_ID WHERE COBRANCA.STATUS_COBRANCA  = 'NAO_PAGO'     AND COBRANCA.DT_VENCIMENTO > (SELECT MAX(CONSOLIDADO_FINANCEIRO_COTA.DT_CONSOLIDADO) FROM CONSOLIDADO_FINANCEIRO_COTA));																																																																																																																		                                                																																																																																																																																																																																																																																															

-- Apaga a tabela criada na exportação da entidade (ViewNotaFiscal)

DROP TABLE IF EXISTS VIEW_NOTA_FISCAL;

--Cria a view correspondente a entidade (ViewNotaFiscal)

CREATE OR REPLACE VIEW VIEW_NOTA_FISCAL AS (SELECT 'ENTRADA' AS NOTAS_DE, NOTA_FISCAL_ENTRADA.ID as NOTA_FISCAL_ID, PESSOA_COTA.ID AS PESSOA_ID, NOTA_FISCAL_ENTRADA.TIPO AS TIPO, NOTA_FISCAL_ENTRADA.CHAVE_ACESSO AS CHAVE_ACESSO, NOTA_FISCAL_ENTRADA.DATA_EMISSAO AS DATA_EMISSAO, NOTA_FISCAL_ENTRADA.DATA_EXPEDICAO AS DATA_EXPEDICAO, NOTA_FISCAL_ENTRADA.EMITIDA AS EMITIDA, NOTA_FISCAL_ENTRADA.NUMERO AS NUMERO, NOTA_FISCAL_ENTRADA.SERIE AS SERIE, NOTA_FISCAL_ENTRADA.STATUS_EMISSAO AS STATUS_EMISSAO, NOTA_FISCAL_ENTRADA.VALOR_BRUTO AS VALOR_BRUTO, NOTA_FISCAL_ENTRADA.VALOR_DESCONTO AS VALOR_DESCONTO, NOTA_FISCAL_ENTRADA.VALOR_LIQUIDO AS VALOR_LIQUIDO, NOTA_FISCAL_ENTRADA.TIPO_EMISSAO_NFE AS TIPO_EMISSAO_NFE, NOTA_FISCAL_ENTRADA.MOVIMENTO_INTEGRACAO AS MOVIMENTO_INTEGRACAO, NOTA_FISCAL_ENTRADA.STATUS_EMISSAO_NFE AS STATUS_EMISSAO_NFE,  NOTA_FISCAL_ENTRADA.ORIGEM AS ORIGEM, NOTA_FISCAL_ENTRADA.STATUS_NOTA_FISCAL,  NOTA_FISCAL_ENTRADA.CFOP_ID AS CFOP_ID, NOTA_FISCAL_ENTRADA.PJ_ID AS PJ_ID, NOTA_FISCAL_ENTRADA.TIPO_NF_ID AS TIPO_NF_ID,  NOTA_FISCAL_ENTRADA.USUARIO_ID AS USUARIO_ID, NOTA_FISCAL_ENTRADA.COTA_ID AS COTA_ID, NOTA_FISCAL_ENTRADA.FORNECEDOR_ID AS FORNECEDOR_ID  FROM NOTA_FISCAL_ENTRADA  INNER JOIN COTA ON (     NOTA_FISCAL_ENTRADA.COTA_ID = COTA.ID )   INNER JOIN PESSOA AS PESSOA_COTA ON (     COTA.PESSOA_ID = PESSOA_COTA.ID )  WHERE  NOTA_FISCAL_ENTRADA.EMITIDA = 1 ) UNION ( SELECT 'ENTRADA' AS NOTAS_DE, NOTA_FISCAL_ENTRADA.ID as NOTA_FISCAL_ID, PESSOA_FORNECEDOR.ID AS PESSOA_ID, NOTA_FISCAL_ENTRADA.TIPO AS TIPO, NOTA_FISCAL_ENTRADA.CHAVE_ACESSO AS CHAVE_ACESSO, NOTA_FISCAL_ENTRADA.DATA_EMISSAO AS DATA_EMISSAO, NOTA_FISCAL_ENTRADA.DATA_EXPEDICAO AS DATA_EXPEDICAO, NOTA_FISCAL_ENTRADA.EMITIDA AS EMITIDA, NOTA_FISCAL_ENTRADA.NUMERO AS NUMERO, NOTA_FISCAL_ENTRADA.SERIE AS SERIE, NOTA_FISCAL_ENTRADA.STATUS_EMISSAO AS STATUS_EMISSAO, NOTA_FISCAL_ENTRADA.VALOR_BRUTO AS VALOR_BRUTO, NOTA_FISCAL_ENTRADA.VALOR_DESCONTO AS VALOR_DESCONTO, NOTA_FISCAL_ENTRADA.VALOR_LIQUIDO AS VALOR_LIQUIDO, NOTA_FISCAL_ENTRADA.TIPO_EMISSAO_NFE AS TIPO_EMISSAO_NFE, NOTA_FISCAL_ENTRADA.MOVIMENTO_INTEGRACAO AS MOVIMENTO_INTEGRACAO, NOTA_FISCAL_ENTRADA.STATUS_EMISSAO_NFE AS STATUS_EMISSAO_NFE,  NOTA_FISCAL_ENTRADA.ORIGEM AS ORIGEM, NOTA_FISCAL_ENTRADA.STATUS_NOTA_FISCAL,  NOTA_FISCAL_ENTRADA.CFOP_ID AS CFOP_ID, NOTA_FISCAL_ENTRADA.PJ_ID AS PJ_ID, NOTA_FISCAL_ENTRADA.TIPO_NF_ID AS TIPO_NF_ID,  NOTA_FISCAL_ENTRADA.USUARIO_ID AS USUARIO_ID, NOTA_FISCAL_ENTRADA.COTA_ID AS COTA_ID, NOTA_FISCAL_ENTRADA.FORNECEDOR_ID AS FORNECEDOR_ID  FROM NOTA_FISCAL_ENTRADA  INNER JOIN FORNECEDOR ON (     NOTA_FISCAL_ENTRADA.FORNECEDOR_ID = FORNECEDOR.ID )   INNER JOIN PESSOA AS PESSOA_FORNECEDOR ON (     FORNECEDOR.JURIDICA_ID = PESSOA_FORNECEDOR.ID )  WHERE  NOTA_FISCAL_ENTRADA.EMITIDA = 1 )  UNION  (  SELECT   'SAIDA' AS NOTAS_DE, NOTA_FISCAL_SAIDA.ID as NOTA_FISCAL_ID, PESSOA_FORNECEDOR.ID AS PESSOA_ID, NOTA_FISCAL_SAIDA.TIPO AS TIPO, NOTA_FISCAL_SAIDA.CHAVE_ACESSO AS CHAVE_ACESSO, NOTA_FISCAL_SAIDA.DATA_EMISSAO AS DATA_EMISSAO, NOTA_FISCAL_SAIDA.DATA_EXPEDICAO AS DATA_EXPEDICAO, NOTA_FISCAL_SAIDA.EMITIDA AS EMITIDA, NOTA_FISCAL_SAIDA.NUMERO AS NUMERO, NOTA_FISCAL_SAIDA.SERIE AS SERIE, NOTA_FISCAL_SAIDA.STATUS_EMISSAO AS STATUS_EMISSAO, NOTA_FISCAL_SAIDA.VALOR_BRUTO AS VALOR_BRUTO, NOTA_FISCAL_SAIDA.VALOR_DESCONTO AS VALOR_DESCONTO, NOTA_FISCAL_SAIDA.VALOR_LIQUIDO AS VALOR_LIQUIDO, NOTA_FISCAL_SAIDA.TIPO_EMISSAO_NFE AS TIPO_EMISSAO_NFE, NOTA_FISCAL_SAIDA.MOVIMENTO_INTEGRACAO AS MOVIMENTO_INTEGRACAO, NOTA_FISCAL_SAIDA.STATUS_EMISSAO_NFE AS STATUS_EMISSAO_NFE,   NULL AS ORIGEM, NULL AS STATUS_NOTA_FISCAL,  NOTA_FISCAL_SAIDA.CFOP_ID AS CFOP_ID, NOTA_FISCAL_SAIDA.PJ_ID AS PJ_ID, NOTA_FISCAL_SAIDA.TIPO_NF_ID AS TIPO_NF_ID,  NULL AS USUARIO_ID, NULL AS COTA_ID,  NOTA_FISCAL_SAIDA.FORNECEDOR_ID AS FORNECEDOR_ID  FROM NOTA_FISCAL_SAIDA   INNER JOIN FORNECEDOR ON (     NOTA_FISCAL_SAIDA.FORNECEDOR_ID = FORNECEDOR.ID )   INNER JOIN PESSOA AS PESSOA_FORNECEDOR ON (     FORNECEDOR.JURIDICA_ID = PESSOA_FORNECEDOR.ID )   WHERE  NOTA_FISCAL_SAIDA.EMITIDA = 1  );

--Cria as tabelas do Quartz

CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS(SCHED_NAME VARCHAR(120) NOT NULL,JOB_NAME  VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250) NULL,JOB_CLASS_NAME   VARCHAR(250) NOT NULL,IS_DURABLE VARCHAR(1) NOT NULL,IS_NONCONCURRENT VARCHAR(1) NOT NULL,IS_UPDATE_DATA VARCHAR(1) NOT NULL,REQUESTS_RECOVERY VARCHAR(1) NOT NULL,JOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,JOB_NAME  VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250) NULL,NEXT_FIRE_TIME BIGINT(13) NULL,PREV_FIRE_TIME BIGINT(13) NULL,PRIORITY INTEGER NULL,TRIGGER_STATE VARCHAR(16) NOT NULL,TRIGGER_TYPE VARCHAR(8) NOT NULL,START_TIME BIGINT(13) NOT NULL,END_TIME BIGINT(13) NULL,CALENDAR_NAME VARCHAR(200) NULL,MISFIRE_INSTR SMALLINT(2) NULL,JOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,REPEAT_COUNT BIGINT(7) NOT NULL,REPEAT_INTERVAL BIGINT(12) NOT NULL,TIMES_TRIGGERED BIGINT(10) NOT NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,CRON_EXPRESSION VARCHAR(200) NOT NULL,TIME_ZONE_ID VARCHAR(80),PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,STR_PROP_1 VARCHAR(512) NULL,STR_PROP_2 VARCHAR(512) NULL,STR_PROP_3 VARCHAR(512) NULL,INT_PROP_1 INT NULL,INT_PROP_2 INT NULL,LONG_PROP_1 BIGINT NULL,LONG_PROP_2 BIGINT NULL,DEC_PROP_1 NUMERIC(13,4) NULL,DEC_PROP_2 NUMERIC(13,4) NULL,BOOL_PROP_1 VARCHAR(1) NULL,BOOL_PROP_2 VARCHAR(1) NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,BLOB_DATA BLOB NULL,PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS(SCHED_NAME VARCHAR(120) NOT NULL,CALENDAR_NAME  VARCHAR(200) NOT NULL,CALENDAR BLOB NOT NULL,PRIMARY KEY (SCHED_NAME,CALENDAR_NAME));

CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_GROUP  VARCHAR(200) NOT NULL, PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP));

CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,ENTRY_ID VARCHAR(95) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,FIRED_TIME BIGINT(13) NOT NULL,PRIORITY INTEGER NOT NULL,STATE VARCHAR(16) NOT NULL,JOB_NAME VARCHAR(200) NULL,JOB_GROUP VARCHAR(200) NULL,IS_NONCONCURRENT VARCHAR(1) NULL,REQUESTS_RECOVERY VARCHAR(1) NULL,PRIMARY KEY (SCHED_NAME,ENTRY_ID));

CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE(SCHED_NAME VARCHAR(120) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,LAST_CHECKIN_TIME BIGINT(13) NOT NULL,CHECKIN_INTERVAL BIGINT(13) NOT NULL,PRIMARY KEY (SCHED_NAME,INSTANCE_NAME));

CREATE TABLE IF NOT EXISTS QRTZ_LOCKS(SCHED_NAME VARCHAR(120) NOT NULL,LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (SCHED_NAME,LOCK_NAME));